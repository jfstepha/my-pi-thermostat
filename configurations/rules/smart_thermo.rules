import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*

rule "Smart thermo cron"

when Time cron "0 * * * * ?" then

	logInfo("FILE", "** Executing smart thermo cron job ** ")
	logInfo("FILE", "Initializing variables")
	if ( TempSet_AS_Studio_Day.state == Uninitialized ) { postUpdate(TempSet_AS_Studio_Day, 70 ) }
	if ( TempSet_AS_Studio_Night.state == Uninitialized ) { postUpdate(TempSet_AS_Studio_Night, 70 ) }
	if ( TempSet_AS_Studio_Away.state == Uninitialized ) { postUpdate(TempSet_AS_Studio_Away, 70 ) }
	if ( TempSet_FF_Living_Day.state == Uninitialized ) { postUpdate(TempSet_FF_Living_Day, 70 ) }
	if ( TempSet_FF_Living_Night.state == Uninitialized ) { postUpdate(TempSet_FF_Living_Night, 70 ) }
	if ( TempSet_FF_Living_Away.state == Uninitialized ) { postUpdate(TempSet_FF_Living_Away, 70 ) }
	if ( SmartThermo_AS_Mode.state == Uninitialized ) { postUpdate( SmartThermo_AS_Mode, "day" )}

	logInfo("FILE", "** Cron job done **")

end

/* 0=disabled, 1=away, 2=night, 3=day */

/* Cron rules switch the modes at specific times */
rule "Smart thermo FF night"

when Time cron "0 30 23 * * ?" then
	if( SmartThermo_AS_Mode.state == 0 /* disabled */) {
		logInfo("FILE", "Smart AS thermo would switch to night, but it is disabled ")
	} else {
		logInfo("FILE", "Smart thermo cron switching FF to night")
		postUpdate( SmartThermo_AS_Mode, 2 /* night */)
	}
end

rule "Smart thermo FF day"
when Time cron "00 00 5 * * ?" then
	if( SmartThermo_AS_Mode.state == 0 /* disabled */) {
		logInfo("FILE", "Smart AS thermo would switch to day, but it is disabled ")
	} else {
		logInfo("FILE", "Smart thermo cron switching FF to day")
		postUpdate( SmartThermo_AS_Mode, 3 /* day */ )
	}
end

// rule "Smart thermo FF away"
//when Time cron "20 * * * * ?" then
//	if( SmartThermo_AS_Mode.state == 0 ) {
//		logInfo("FILE", "Smart AS thermo would switch to away, but it is disabled ")
//	} else {
//		logInfo("FILE", "Smart thermo cron switching FF to away")
//		postUpdate( SmartThermo_AS_Mode, 1 /* away */ )
//	}
//end

/* Rules for when the mode changes, to actually do something */
	
rule "Smart thermo AS change"

when Item SmartThermo_AS_Mode changed then
	if (SmartThermo_AS_Mode.state == 0 /* disabled */ ) {
		logInfo("FILE", "Smart thermo switching AS to disabled")
		postUpdate( SmartThermo_AS_Mode_String, "disabled")		
	}
	else if (SmartThermo_AS_Mode.state == 3 /* day */) { 
		logInfo("FILE", "Smart thermo switching AS to day")
		postUpdate( SmartThermo_AS_Mode_String, "day" )
		postUpdate( TempSet_AS_Studio, TempSet_AS_Studio_Day.state )
	}
	else if (SmartThermo_AS_Mode.state == 2 /* night */) { 
		logInfo("FILE", "Smart thermo switching AS to night")
		postUpdate( SmartThermo_AS_Mode_String, "night")
		postUpdate( TempSet_AS_Studio, TempSet_AS_Studio_Night.state )
	}
	else if (SmartThermo_AS_Mode.state == 1 /* away */) { 
		logInfo("FILE", "Smart thermo switching AS to away")
		postUpdate( SmartThermo_AS_Mode_String, "away")
		postUpdate( TempSet_AS_Studio, TempSet_AS_Studio_Away.state )
	} else {
		logInfo("FILE", "Smart thermo AS unrecognized state" + SmartThermo_AS_Mode)		
	}	
end

rule "Smart thermo FF Change"

when Item SmartThermo_FF_Mode changed then
	if (SmartThermo_FF_Mode.state == 0 /* disabled */ ) {
		logInfo("FILE", "Smart thermo switching FF to disabled")
		postUpdate( SmartThermo_FF_Mode_String, "disabled")		
	}
	else if (SmartThermo_FF_Mode.state == 3 /* day */) { 
		logInfo("FILE", "Smart thermo switching FF to day")
		postUpdate( SmartThermo_FF_Mode_String, "day" )
		postUpdate( TempSet_FF_Living, TempSet_FF_Living_Day.state )
	}
	else if (SmartThermo_FF_Mode.state == 2 /* night */) { 
		logInfo("FILE", "Smart thermo switching FF to night")
		postUpdate( SmartThermo_FF_Mode_String, "night")
		postUpdate( TempSet_FF_Living, TempSet_FF_Living_Night.state )
	}
	else if (SmartThermo_AS_Mode.state == 1 /* away */) { 
		logInfo("FILE", "Smart thermo switching FF to away")
		postUpdate( SmartThermo_FF_Mode_String, "away")
		postUpdate( TempSet_FF_Living, TempSet_FF_Living_Away.state )
	} else {
		logInfo("FILE", "Smart thermo FF unrecognized state" + SmartThermo_FF_Mode)		
	}	
end

