import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*

rule "Set temp 50"
when
	Item SetTemp60_FF_Living changed to ON
then
	sendHttpGetRequest("http://pi/_setTarget/77.0")
end


rule "Duty Cycle Adjust"
when Time cron "0 * * * * ?" then
	logInfo("FILE", "** Executing cron job every minute ** ")

    logInfo("FILE", "Checking FF values")
    if( Heat_FF_Last_On.state == Uninitialized || Heat_FF_Last_Off.state == Uninitialized || Heat_FF_On_Time.state == Uninitialized
        || Heat_FF_Cycle_Time.state == Uninitialized) {
		logInfo("FILE","Heat_FF_Last_On was not initialized, setting to now")
		postUpdate( Heat_FF_Last_On, now.millis - 100000)
		postUpdate( Heat_FF_Last_Off, now.millis - 99000)
		postUpdate( Heat_FF_On_Time, 1)
		postUpdate( Heat_FF_Cycle_Time, 100)  
	}
    logInfo("FILE", "Checking SF values")
    if( Heat_SF_Last_On.state == Uninitialized || Heat_SF_Last_Off.state == Uninitialized || Heat_SF_On_Time.state == Uninitialized 
        || Heat_SF_Cycle_Time.state == Uninitialized) {
		logInfo("FILE","Heat_SF_Last_On was not initialized, setting to now")
		postUpdate( Heat_SF_Last_On, now.millis - 100000)
		postUpdate( Heat_SF_Last_Off, now.millis - 99000)
		postUpdate( Heat_SF_On_Time, 1)
		postUpdate( Heat_SF_Cycle_Time, 100)  
	}

	logInfo("FILE", "Checking FF heat duty cycle")
	
	if (Heat_FF_Living.state == "ON" && Heat_FF_Last_On.state as DecimalType > Heat_FF_Last_Off.state as DecimalType ){ /* second clause is for when this gets executed before the  scaling rule */
		postUpdate( Heat_FF_On_Time, ( ( now.millis  - (Heat_FF_Last_On.state as DecimalType) ) / 60000.0 ) ) 
		postUpdate(Heat_FF_Cycle_Time, ((now.millis - (Heat_FF_Last_Off.state as DecimalType)) / 60000.0 ) )
		var dc = (Heat_FF_On_Time.state as DecimalType) / ( ( Heat_FF_Cycle_Time.state as DecimalType ) + 0.0001) * 100 
		logInfo("FILE", "   on time="+Heat_FF_On_Time.state + " cycle time=" + Heat_FF_Cycle_Time.state)
		logInfo("FILE", "   dc=" + dc + " Heat_FF_Duty_Cycle="+Heat_FF_Duty_Cycle)
		if (dc > Heat_FF_Duty_Cycle.state as DecimalType) {
				logInfo("FILE", "Updating duty cycle: dc > duty cycle when on")
			postUpdate( Heat_FF_Duty_Cycle, dc )
		}
	} else if (Heat_FF_Last_Off.state as DecimalType > Heat_FF_Last_On.state as DecimalType)  { /* Heat_FF_Living is off */
		postUpdate(Heat_FF_Cycle_Time, ((now.millis - (Heat_FF_Last_On.state as DecimalType)) / 60000.0 ) )
		var dc = (Heat_FF_On_Time.state as DecimalType) / ( ( Heat_FF_Cycle_Time.state as DecimalType ) + 0.0001) * 100 
		logInfo("FILE", "   on time="+Heat_FF_On_Time.state + " cycle time=" + Heat_FF_Cycle_Time.state)
		logInfo("FILE", "   dc=" + dc + " Heat_FF_Duty_Cycle="+Heat_FF_Duty_Cycle.state)
		if (dc < Heat_FF_Duty_Cycle.state as DecimalType ) {
			logInfo("FILE", "Updating duty cycle: dc < duty cycle when off")
			postUpdate( Heat_FF_Duty_Cycle, dc)
		}
	}

	logInfo("FILE", "Checking SF heat duty cycle")

	if (Heat_SF_Hall.state == "ON"){
		postUpdate(Heat_SF_On_Time, ( (now.millis - (Heat_SF_Last_On.state as DecimalType) ) / 60000.0 ) ) 
		postUpdate(Heat_SF_Cycle_Time, ((now.millis - (Heat_SF_Last_Off.state as DecimalType)) / 60000.0 ) )
		var dc = (Heat_SF_On_Time.state as DecimalType) / ( ( Heat_SF_Cycle_Time.state as DecimalType ) + 0.0001) * 100 
		logInfo("FILE", "   on time="+Heat_SF_On_Time.state + " cycle time=" + Heat_SF_Cycle_Time.state)
		logInfo("FILE", "   dc=" + dc + " Heat_SF_Duty_Cycle="+Heat_SF_Duty_Cycle.state)
		if (dc > Heat_SF_Duty_Cycle.state as DecimalType) {
				logInfo("FILE", "Updating SF duty cycle: dc > duty cycle when on")
			postUpdate( Heat_SF_Duty_Cycle, dc )
		}
	} else { /* Heat_SF_Hall is off */
		postUpdate(Heat_SF_Cycle_Time, ((now.millis - (Heat_SF_Last_On.state as DecimalType)) / 60000.0 ) )
		var dc = (Heat_SF_On_Time.state as DecimalType) / ( ( Heat_SF_Cycle_Time.state as DecimalType ) + 0.0001) * 100 
		logInfo("FILE", "   on time="+Heat_SF_On_Time.state + " cycle time=" + Heat_SF_Cycle_Time.state)
		logInfo("FILE", "   dc=" + dc + " Heat_SF_Duty_Cycle="+Heat_SF_Duty_Cycle.state)
		if (dc < Heat_SF_Duty_Cycle.state as DecimalType ) {
			logInfo("FILE", "Updating duty cycle: dc < duty cycle when off")
			postUpdate( Heat_SF_Duty_Cycle, dc)
		}
	}

    logInfo("FILE", "Checking FF cool values")
    if( Cool_FF_Last_On.state == Uninitialized || Cool_FF_Last_Off.state == Uninitialized || Cool_FF_On_Time.state == Uninitialized
        || Cool_FF_Cycle_Time.state == Uninitialized) {
		logInfo("FILE","Cool_FF_Last_On was not initialized, setting to now")
		postUpdate( Cool_FF_Last_On, now.millis - 100000)
		postUpdate( Cool_FF_Last_Off, now.millis - 99000)
		postUpdate( Cool_FF_On_Time, 1)
		postUpdate( Cool_FF_Cycle_Time, 100)  
	}
    logInfo("FILE", "Checking SF cool values")
    if( Cool_SF_Last_On.state == Uninitialized || Cool_SF_Last_Off.state == Uninitialized || Cool_SF_On_Time.state == Uninitialized 
        || Cool_SF_Cycle_Time.state == Uninitialized) {
		logInfo("FILE","Cool_SF_Last_On was not initialized, setting to now")
		postUpdate( Cool_SF_Last_On, now.millis - 100000)
		postUpdate( Cool_SF_Last_Off, now.millis - 99000)
		postUpdate( Cool_SF_On_Time, 1)
		postUpdate( Cool_SF_Cycle_Time, 100)  
	}

	logInfo("FILE", "Checking FF cool duty cycle")
	
	if (Cool_FF_Living.state == "ON" && Cool_FF_Last_On.state as DecimalType > Cool_FF_Last_Off.state as DecimalType ){ /* second clause is for when this gets executed before the  scaling rule */
		postUpdate( Cool_FF_On_Time, ( ( now.millis  - (Cool_FF_Last_On.state as DecimalType) ) / 60000.0 ) ) 
		postUpdate(Cool_FF_Cycle_Time, ((now.millis - (Cool_FF_Last_Off.state as DecimalType)) / 60000.0 ) )
		var dc = (Cool_FF_On_Time.state as DecimalType) / ( ( Cool_FF_Cycle_Time.state as DecimalType ) + 0.0001) * 100 
		logInfo("FILE", "   on time="+Cool_FF_On_Time.state + " cycle time=" + Cool_FF_Cycle_Time.state)
		logInfo("FILE", "   dc=" + dc + " Cool_FF_Duty_Cycle="+Cool_FF_Duty_Cycle)
		if (dc > Cool_FF_Duty_Cycle.state as DecimalType) {
				logInfo("FILE", "Updating duty cycle: dc > duty cycle when on")
			postUpdate( Cool_FF_Duty_Cycle, dc )
		}
	} else if (Cool_FF_Last_Off.state as DecimalType > Cool_FF_Last_On.state as DecimalType)  { /* Cool_FF_Living is off */
		postUpdate(Cool_FF_Cycle_Time, ((now.millis - (Cool_FF_Last_On.state as DecimalType)) / 60000.0 ) )
		var dc = (Cool_FF_On_Time.state as DecimalType) / ( ( Cool_FF_Cycle_Time.state as DecimalType ) + 0.0001) * 100 
		logInfo("FILE", "   on time="+Cool_FF_On_Time.state + " cycle time=" + Cool_FF_Cycle_Time.state)
		logInfo("FILE", "   dc=" + dc + " Cool_FF_Duty_Cycle="+Cool_FF_Duty_Cycle.state)
		if (dc < Cool_FF_Duty_Cycle.state as DecimalType ) {
			logInfo("FILE", "Updating duty cycle: dc < duty cycle when off")
			postUpdate( Cool_FF_Duty_Cycle, dc)
		}
	}

	logInfo("FILE", "Checking SF cool duty cycle")

	if (Heat_SF_Hall.state == "ON"){
		postUpdate(Cool_SF_On_Time, ( (now.millis - (Cool_SF_Last_On.state as DecimalType) ) / 60000.0 ) ) 
		postUpdate(Cool_SF_Cycle_Time, ((now.millis - (Cool_SF_Last_Off.state as DecimalType)) / 60000.0 ) )
		var dc = (Cool_SF_On_Time.state as DecimalType) / ( ( Cool_SF_Cycle_Time.state as DecimalType ) + 0.0001) * 100 
		logInfo("FILE", "   on time="+Cool_SF_On_Time.state + " cycle time=" + Cool_SF_Cycle_Time.state)
		logInfo("FILE", "   dc=" + dc + " Cool_SF_Duty_Cycle="+Cool_SF_Duty_Cycle.state)
		if (dc > Cool_SF_Duty_Cycle.state as DecimalType) {
				logInfo("FILE", "Updating SF duty cycle: dc > duty cycle when on")
			postUpdate( Cool_SF_Duty_Cycle, dc )
		}
	} else { /* Heat_SF_Hall is off */
		postUpdate(Cool_SF_Cycle_Time, ((now.millis - (Cool_SF_Last_On.state as DecimalType)) / 60000.0 ) )
		var dc = (Cool_SF_On_Time.state as DecimalType) / ( ( Cool_SF_Cycle_Time.state as DecimalType ) + 0.0001) * 100 
		logInfo("FILE", "   on time="+Cool_SF_On_Time.state + " cycle time=" + Cool_SF_Cycle_Time.state)
		logInfo("FILE", "   dc=" + dc + " Cool_SF_Duty_Cycle="+Cool_SF_Duty_Cycle.state)
		if (dc < Cool_SF_Duty_Cycle.state as DecimalType ) {
			logInfo("FILE", "Updating duty cycle: dc < duty cycle when off")
			postUpdate( Cool_SF_Duty_Cycle, dc)
		}
	}


	logInfo("FILE", "** Cron job done **")
end

/********************************/
/* Living room thermostat rules */
/*********************************/

rule "Set thermo temp"
when
	Item TempSet_FF_Living changed
then
	sendHttpGetRequest("http://lr-thermo/_setTarget/" + TempSet_FF_Living.state)
end

rule "Fan scaling"
when
        Item Fan_FF_Living changed to ON
then
        postUpdate(Fan_FF_Living_Scaled, 71)
end

rule "Fan scaling2"
when
        Item Fan_FF_Living changed to OFF
then
        postUpdate(Fan_FF_Living_Scaled, 70)
end

rule "Cool scaling"
when
        Item Cool_FF_Living changed to ON
then
    logInfo("FILE", "Executing rule FF Cool Scaling on")
        postUpdate(Cool_FF_Living_Scaled, 69)

    logInfo("FILE", "Cool_FF_Last_On=" + Cool_FF_Last_On.state + " Cool_FF_Last_Off=" + Cool_FF_Last_Off.state)
    if( Cool_FF_Last_On.state == Uninitialized) {
         logInfo("FILE", "Cool_FF_Last_On was not init, setting to now")
         postUpdate( Cool_FF_Last_On, now.millis)
    }
    if( Cool_FF_Last_Off.state == Uninitialized) {
         logInfo("FILE", "Cool_FF_Last_Off was not init, setting to now")
         postUpdate( Cool_FF_Last_Off, now.millis)
    }
	logInfo("FILE", "Setting Cool_FF_On_Time")
	postUpdate(Cool_FF_On_Time, ( ( (Cool_FF_Last_Off.state as DecimalType)  - (Cool_FF_Last_On.state as DecimalType) ) / 60000.0 ) ) 

	logInfo("FILE", "Setting Cool_FF_Cycle_Time")
	postUpdate(Cool_FF_Cycle_Time,( (now.millis - (Cool_FF_Last_On.state as DecimalType ) ) / 60000.0 ) )

	logInfo("FILE", "Setting Cool_FF_Duty_Cycle")
	postUpdate(Cool_FF_Duty_Cycle, ( (Cool_FF_On_Time.state as DecimalType) / ( (Cool_FF_Cycle_Time.state as DecimalType) + 0.0001) * 100 ) ) 

	logInfo("FILE", "Setting Cool_FF_Last_on")
	postUpdate(Cool_FF_Last_On, now.millis)
	logInfo("FILE", "New DC=" + Cool_FF_Duty_Cycle.state+" OnTime="+Cool_FF_On_Time.state+" CycleTime="+Cool_FF_Cycle_Time.state)
	logInfo("FILE", "Done with rule FF Cool Scaling on")
end

rule "Cool scaling2"
when
        Item Cool_FF_Living changed to OFF
then
    postUpdate(Cool_FF_Living_Scaled, 68)
    if( Cool_FF_Last_On.state == Uninitialized) {
		logInfo("FILE","Cool_FF_Last_On was not initalized, setting to now")
		postUpdate( Cool_FF_Last_On, now.millis)
	}
        if( Cool_FF_Last_Off.state == Uninitialized) {
		logInfo("FILE","Cool_FF_Last_Off was not initialized, setting to now")
		postUpdate( Cool_FF_Last_Off, now.millis)
	}

	logInfo("FILE","Executing rule FF Cool Scaling off")

	logInfo("FILE", "Setting ffCoolOnTime");
	postUpdate(Cool_FF_On_Time, ((now.millis - (Cool_FF_Last_On.state as DecimalType) ) / 60000.0 ) )

	logInfo("FILE", "Setting ffCoolCycleTime");
	postUpdate(Cool_FF_Cycle_Time, ((now.millis - (Cool_FF_Last_Off.state as DecimalType)) / 60000.0 ) )

	logInfo("FILE", "Setting ffCoolDutyCycle");
	postUpdate(Cool_FF_Duty_Cycle, ((Cool_FF_On_Time.state as DecimalType) / ((Cool_FF_Cycle_Time.state as DecimalType) + 0.0001) * 100.0 ) )

	logInfo("FILE", "Setting ffCoolLastOff");
	postUpdate(Cool_FF_Last_Off, now.millis)
	logInfo("FILE", "New DC=" + Cool_FF_Duty_Cycle.state+" OnTime="+Cool_FF_On_Time.state+" CycleTime="+Cool_FF_Cycle_Time.state)
	logInfo("FILE", "Rule FF Cool Scaling off finished")
end

rule "Heat FF scaling on"
when
        Item Heat_FF_Living changed to ON
then
	logInfo("FILE", "Executing rule FF Heat Scaling on")
        postUpdate(Heat_FF_Living_Scaled, 67)

	logInfo("FILE", "Heat_FF_Last_On=" + Heat_FF_Last_On.state + " Heat_FF_Last_Off=" + Heat_FF_Last_Off.state)

        if( Heat_FF_Last_On.state == Uninitialized) {
		logInfo("FILE","Heat_FF_Last_On was not init, setting to now")
		postUpdate( Heat_FF_Last_On, now.millis)
	}
        if( Heat_FF_Last_Off.state == Uninitialized) {
		logInfo("FILE","Heat_FF_Last_Off was null, setting to now")
		postUpdate( Heat_FF_Last_Off, now.millis)
	}
		
	logInfo("FILE", "Setting Heat_FF_On_Time")
	postUpdate(Heat_FF_On_Time, ( ( (Heat_FF_Last_Off.state as DecimalType)  - (Heat_FF_Last_On.state as DecimalType) ) / 60000.0 ) ) 

	logInfo("FILE", "Setting Heat_FF_Cycle_Time")
	postUpdate(Heat_FF_Cycle_Time,( (now.millis - (Heat_FF_Last_On.state as DecimalType ) ) / 60000.0 ) )

	logInfo("FILE", "Setting Heat_FF_Duty_Cycle")
	postUpdate(Heat_FF_Duty_Cycle, ( (Heat_FF_On_Time.state as DecimalType) / ( (Heat_FF_Cycle_Time.state as DecimalType) + 0.0001) * 100 ) ) 

	logInfo("FILE", "Setting Heat_FF_Last_on")
	postUpdate(Heat_FF_Last_On, now.millis)
	logInfo("FILE", "New DC=" + Heat_FF_Duty_Cycle.state+" OnTime="+Heat_FF_On_Time.state+" CycleTime="+Heat_FF_Cycle_Time.state)
	logInfo("FILE", "Done with rule FF Heat Scaling on")
end

rule "Heat FF scaling off"
when
        Item Heat_FF_Living changed to OFF
then
    if( Heat_FF_Last_On.state == Uninitialized) {
		logInfo("FILE","Heat_FF_Last_On was not initalized, setting to now")
		postUpdate( Heat_FF_Last_On, now.millis)
	}
        if( Heat_FF_Last_Off.state == Uninitialized) {
		logInfo("FILE","Heat_FF_Last_Off was not initialized, setting to now")
		postUpdate( Heat_FF_Last_Off, now.millis)
	}

	logInfo("FILE","Executing rule FF Heat Scaling off")
	postUpdate(Heat_FF_Living_Scaled, 66)

	logInfo("FILE", "Setting ffHeatOnTime");
	postUpdate(Heat_FF_On_Time, ((now.millis - (Heat_FF_Last_On.state as DecimalType) ) / 60000.0 ) )

	logInfo("FILE", "Setting ffHeatCycleTime");
	postUpdate(Heat_FF_Cycle_Time, ((now.millis - (Heat_FF_Last_Off.state as DecimalType)) / 60000.0 ) )

	logInfo("FILE", "Setting ffHeatDutyCycle");
	postUpdate(Heat_FF_Duty_Cycle, ((Heat_FF_On_Time.state as DecimalType) / ((Heat_FF_Cycle_Time.state as DecimalType) + 0.0001) * 100.0 ) )

	logInfo("FILE", "Setting ffHeatLastOff");
	postUpdate(Heat_FF_Last_Off, now.millis)
	logInfo("FILE", "New DC=" + Heat_FF_Duty_Cycle.state+" OnTime="+Heat_FF_On_Time.state+" CycleTime="+Heat_FF_Cycle_Time.state)
	logInfo("FILE", "Rule FF Heat Scaling off finished")
end

rule "Heat index LR"

when 
        Item Temperature_FF_Living_Thermo changed
then
        if (Temperature_FF_Living_Thermo.state as DecimalType> 70 ) {

                var T = Temperature_FF_Living_Thermo.state as DecimalType
                var RH = Humidity_FF_Living_Thermo.state as DecimalType
                postUpdate(HeatIndex_FF_Living_Thermo, 0.363445176 + 0.988622465 * T + 4.777114035 * RH - 0.114037667 * T * RH - 0.000850208 * T * T -0.020716198 * RH * RH + 0.000687678* T * T * RH + 0.000274954 * T * RH * RH )
        } else {
                postUpdate(HeatIndex_FF_Living_Thermo, Temperature_FF_Living_Thermo.state)
        }
end

/*******************************/
/* Art Studio thermostat rules */
/*******************************/
rule "Set thermo temp AS"
when
	Item TempSet_AS_Studio changed
then
	sendHttpGetRequest("http://as-thermo/_setTarget/" + TempSet_AS_Studio.state)
end

rule "Fan scaling AS"
when
        Item Fan_AS_Studio changed to ON
then
        postUpdate(Fan_AS_Studio_Scaled, 71)
end

rule "Fan scaling2 AS"
when
        Item Fan_AS_Studio changed to OFF
then
        postUpdate(Fan_AS_Studio_Scaled, 70)
end

rule "Cool scaling AS"
when
        Item Cool_AS_Studio changed to ON
then
        postUpdate(Cool_AS_Studio_Scaled, 69)
end

rule "Cool scaling2 AS"
when
        Item Cool_AS_Studio changed to OFF
then
        postUpdate(Cool_AS_Studio_Scaled, 68)
end

rule "Heat scaling AS on"
when
        Item Heat_AS_Studio changed to ON
then
	logInfo("FILE", "Executing rule AS Heat Scaling on")
        postUpdate(Heat_AS_Studio_Scaled, 67)

        if( Heat_AS_Last_On.state == Uninitialized) {
		logInfo("FILE","Heat_AS_Last_On was not initialized, setting to now")
		postUpdate( Heat_AS_Last_On, now.millis)
	}
        if( Heat_AS_Last_Off.state == Uninitialized) {
		logInfo("FILE","Heat_AS_Last_Off was not initialized, setting to now")
		postUpdate( Heat_AS_Last_Off, now.millis)
	}

	logInfo("FILE", "Setting Heat_AS_On_Time")
	postUpdate(Heat_AS_On_Time, ( ( (Heat_AS_Last_Off.state as DecimalType)  - (Heat_AS_Last_On.state as DecimalType) ) / 60000.0 ) ) 

	logInfo("FILE", "Setting Heat_AS_Cycle_Time")
	postUpdate(Heat_AS_Cycle_Time,( (now.millis - (Heat_AS_Last_On.state as DecimalType ) ) / 60000.0 ) )

	logInfo("FILE", "Setting Heat_AS_Duty_Cycle")
	postUpdate(Heat_AS_Duty_Cycle, ( (Heat_AS_On_Time.state as DecimalType) / ( (Heat_AS_Cycle_Time.state as DecimalType) + 0.0001) * 100) )

	logInfo("FILE", "Setting Heat_AS_Last_on")
	postUpdate(Heat_AS_Last_On, now.millis)
	logInfo("FILE", "Done with rule AS Heat Scaling on")

end

rule "Heat scaling off AS"
when
        Item Heat_AS_Studio changed to OFF
then
	logInfo("FILE","Executing rule AS Heat Scaling off")

        if( Heat_AS_Last_On.state == Uninitialized) {
		logInfo("FILE","Heat_AS_Last_On was not initialized, setting to now")
		postUpdate( Heat_AS_Last_On, now.millis)
	}
        if( Heat_AS_Last_Off.state == Uninitialized) {
		logInfo("FILE","Heat_AS_Last_Off was not initialized, setting to now")
		postUpdate( Heat_AS_Last_Off, now.millis)
	}
        postUpdate(Heat_AS_Studio_Scaled, 66)

	logInfo("FILE", "Setting asHeatOnTime");
	postUpdate(Heat_AS_On_Time, ((now.millis - (Heat_AS_Last_On.state as DecimalType) ) / 60000.0 ) )

	logInfo("FILE", "Setting asHeatCycleTime");
	postUpdate(Heat_AS_Cycle_Time, ((now.millis - (Heat_AS_Last_Off.state as DecimalType)) / 60000.0 ) )

	logInfo("FILE", "Setting asHeatDutyCycle");
	postUpdate(Heat_AS_Duty_Cycle, ((Heat_AS_On_Time.state as DecimalType) / ((Heat_AS_Cycle_Time.state as DecimalType) + 0.0001) * 100.0 ) )

	logInfo("FILE", "Setting asHeatLastOff");
	postUpdate(Heat_AS_Last_Off, now.millis)

	logInfo("FILE", "Rule AS Heat Scaling off finished")
end

/*********************************/
/* Second floor thermostat rules */
/*********************************/

rule "Set SF thermo temp"
when
	Item TempSet_SF_Hall changed
then
	sendHttpGetRequest("http://sf-thermo/_setTarget/" + TempSet_SF_Hall.state)
end

rule "Fan SF scaling on"
when
        Item Fan_SF_Hall changed to ON
then
        postUpdate(Fan_SF_Hall_Scaled, 71)
end

rule "Fan SF scaling off"
when
        Item Fan_SF_Hall changed to OFF
then
        postUpdate(Fan_SF_Hall_Scaled, 70)
end

rule "Cool SF scaling on"
when
        Item Cool_SF_Hall changed to ON
then
        postUpdate(Cool_SF_Hall_Scaled, 69)
end

rule "Cool SF scaling off"
when
        Item Cool_SF_Hall changed to OFF
then
        postUpdate(Cool_SF_Hall_Scaled, 68)
end

rule "Heat SF scaling on"
when
        Item Heat_SF_Hall changed to ON
then
	logInfo("FILE", "Executing rule SF Heat Scaling on")
        postUpdate(Heat_SF_Hall_Scaled, 67)

	logInfo("FILE", "Heat_SF_Last_On=" + Heat_SF_Last_On.state + " Heat_SF_Last_Off=" + Heat_SF_Last_Off.state)

        if( Heat_SF_Last_On.state == Uninitialized) {
		logInfo("FILE","Heat_SF_Last_On was not initialized, setting to now")
		postUpdate( Heat_SF_Last_On, now.millis)
	}
        if( Heat_SF_Last_Off.state == Uninitialized) {
		logInfo("FILE","Heat_SF_Last_Off was not initialized, setting to now")
		postUpdate( Heat_SF_Last_Off, now.millis)
	}
		
	logInfo("FILE", "Setting Heat_SF_On_Time")
	postUpdate(Heat_SF_On_Time, ( ( (Heat_SF_Last_Off.state as DecimalType)  - (Heat_SF_Last_On.state as DecimalType) ) / 60000.0 ) ) 

	logInfo("FILE", "Setting Heat_SF_Cycle_Time")
	postUpdate(Heat_SF_Cycle_Time,( (now.millis - (Heat_SF_Last_On.state as DecimalType ) ) / 60000.0 ) )

	logInfo("FILE", "Setting Heat_SF_Duty_Cycle")
	postUpdate(Heat_SF_Duty_Cycle, ( (Heat_SF_On_Time.state as DecimalType) / ( (Heat_SF_Cycle_Time.state as DecimalType) + 0.0001) * 100) )

	logInfo("FILE", "Setting Heat_SF_Last_on")
	postUpdate(Heat_SF_Last_On, now.millis)

	logInfo("FILE", "New DC=" + Heat_SF_Duty_Cycle.state+" OnTime"+Heat_SF_On_Time.state+" CycleTime="+Heat_SF_Cycle_Time.state)
	logInfo("FILE", "Done with rule SF Heat Scaling on")
end

rule "Heat SF scaling off"
when
        Item Heat_SF_Hall changed to OFF
then
        if( Heat_SF_Last_On.state == Uninitialized) {
		logInfo("FILE","Heat_SF_Last_On was not initalized, setting to now")
		postUpdate( Heat_SF_Last_On, now.millis)
	}
        if( Heat_SF_Last_Off.state == Uninitialized) {
		logInfo("FILE","Heat_SF_Last_Off was not initialized, setting to now")
		postUpdate( Heat_SF_Last_Off, now.millis)
	}

	logInfo("FILE","Executing rule SF Heat Scaling off")
        postUpdate(Heat_SF_Hall_Scaled, 66)

	logInfo("FILE", "Setting sfHeatOnTime");
	postUpdate(Heat_SF_On_Time, ((now.millis - (Heat_SF_Last_On.state as DecimalType) ) / 60000.0 ) )

	logInfo("FILE", "Setting sfHeatCycleTime");
	postUpdate(Heat_SF_Cycle_Time, ((now.millis - (Heat_SF_Last_Off.state as DecimalType)) / 60000.0 ) )

	logInfo("FILE", "Setting sfHeatDutyCycle");
	postUpdate(Heat_SF_Duty_Cycle, ((Heat_SF_On_Time.state as DecimalType) / ((Heat_SF_Cycle_Time.state as DecimalType) + 0.0001) * 100.0 ) )

	logInfo("FILE", "Setting sfHeatLastOff");
	postUpdate(Heat_SF_Last_Off, now.millis)
	logInfo("FILE", "New DC=" + Heat_SF_Duty_Cycle.state+" OnTime"+Heat_SF_On_Time.state+" CycleTime="+Heat_SF_Cycle_Time.state)

	logInfo("FILE", "Rule SF Heat Scaling off finished")
end

rule "Heat index SF"

when 
        Item Temperature_SF_Hall_Thermo changed
then
        if (Temperature_SF_Hall_Thermo.state as DecimalType> 70) {

                var T = Temperature_SF_Hall_Thermo.state as DecimalType
                var RH = Humidity_SF_Hall_Thermo.state as DecimalType 
                postUpdate(HeatIndex_SF_Hall, 0.363445176 + 0.988622465 * T + 4.777114035 * RH - 0.114037667 * T * RH - 0.000850208 * T * T -0.020716198 * RH * RH + 0.000687678* T * T * RH + 0.000274954 * T * RH * RH )
        /*        postUpdate(HeatIndex_SF_Hall, -42.379 + 2.04901523 * T + 10.14333127 * RH - 0.22475541 * T * RH - 6.83783e-3 * T * T -5.481717e-2 * RH * RH + 1.22874e-3* T * T * RH + 8.5282e-4 * T * RH * RH -1.99e-6 * T * T * RH * RH) */
        } else {
                postUpdate(HeatIndex_SF_Hall, Temperature_SF_Hall_Thermo.state)
        }
end

