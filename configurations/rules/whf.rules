import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*

import java.util.List
import java.util.ArrayList


val org.eclipse.xtext.xbase.lib.Functions$Function1 calcMean = [ List<Integer> theArray |
	logInfo("FILE", "  * Calc Mean");
	logInfo("FILE", "    # array = " + theArray);
	var sum = 0.0 
	for( int v: theArray) { 
		sum = sum + v * 1.0;
	}
	var retval = sum / theArray.size() * 100.0;
	logInfo("FILE", "    # returning: " + retval);
	retval
]

val org.eclipse.xtext.xbase.lib.Functions$Function2 pushItem = [ theItem, List<Integer> theArray |
	//logInfo("FILE", "  * Pushing item " + theItem);
	//logInfo("FILE", "    * array = " + theArray);
	if( theItem == "true" ) { 
	    logInfo("FILE", "    * pushing 1");
		theArray.add(1)
	} else { 
		logInfo("FILE", "    * pushing 0");
		theArray.add(0)
	}
	if( theArray.size() > 48) { 
		logInfo("FILE", "    * dropping the 1st item");
		theArray.remove(0)
	}
	logInfo("FILE", "    * newary= " + theArray);
	theArray;
]

val org.eclipse.xtext.xbase.lib.Functions$Function2 pushItemL = [ theItem, List<Integer> theArray |
	//logInfo("FILE", "  * Pushing item " + theItem);
	//logInfo("FILE", "    * array = " + theArray);
	if( theItem == "true" ) { 
	    logInfo("FILE", "    * pushing 1");
		theArray.add(1)
	} else { 
		logInfo("FILE", "    * pushing 0");
		theArray.add(0)
	}
	if( theArray.size() > 10000) { 
		logInfo("FILE", "    * dropping the 1st item");
		theArray.remove(0)
	}
	logInfo("FILE", "    * newary= " + theArray);
	theArray;
]

/* for duty cycles */

val List<Integer> aryHeatFF = newArrayList(0,0,1,1)
val List<Integer> aryHeatDailyFF = newArrayList(0,0,1,1)
val List<Integer> aryCoolFF = newArrayList(0,0,1,1)


rule "Set temp 50"
when
	Item SetTemp60_FF_Living changed to true
then
	sendHttpGetRequest("http://pi/_setTarget/77.0")
end

rule "Reset Daily"
when Time cron "0 0 0 * * ?" then
	logInfo("FILE", "********************************************** ")
	logInfo("FILE", "****** reseting daily duty cycles ************ ")
    aryHeatDailyFF = newArrayList(0,0,1,1)
	logInfo("FILE", "done"
	logInfo("FILE", "********************************************** ")
end

rule "Duty Cycle Adjust"
when Time cron "0 */5 * * * ?" then

	logInfo("FILE", "********************************************** ")
	logInfo("FILE", "****** Executing simplified DC cron job ****** ")
	
	if( Heat_FF_Duty_Cycle.state == NULL) { postUpdate( Heat_FF_Duty_Cycle, 0 )}
	if( Heat_FF_Daily_Duty_Cycle.state == NULL) { postUpdate( Heat_FF_Daily_Duty_Cycle, 0 )}
	if( Cool_FF_Duty_Cycle.state == NULL) { postUpdate( Cool_FF_Duty_Cycle, 0 )}

    logInfo("FILE", " ** First Floor Fan ** State=" + Fan_FF_Living.state + " DC = " + Heat_FF_Duty_Cycle.state.format("%.7f"))
    aryHeatFF = pushItem.apply( Fan_FF_Living.state, aryHeatFF )
    postUpdate( Heat_FF_Duty_Cycle, String::format("%.7f", ( calcMean.apply( aryHeatFF) ) ) )

    logInfo("FILE", " ** First Floor Fan Daily ** State=" + Fan_FF_Living.state + " DC = " + Heat_FF_Daily_Duty_Cycle.state.format("%.7f"))
    aryHeatDailyFF = pushItemL.apply( Fan_FF_Living.state, aryHeatDailyFF )
    postUpdate( Heat_FF_Daily_Duty_Cycle, String::format("%.7f", ( calcMean.apply( aryHeatDailyFF) ) ) )

    logInfo("FILE", " ** First Floor cool ** State=" + Cool_FF_Living.state + " DC = " + Cool_FF_Duty_Cycle.state.format("%.7f"))
    aryCoolFF = pushItem.apply( Cool_FF_Living.state, aryCoolFF )
    postUpdate( Cool_FF_Duty_Cycle, String::format("%.7f", ( calcMean.apply( aryCoolFF) ) ) )

	logInfo("FILE", "** Duty cycle Cron job done **")
end

rule "Update Honeywell Thermostat"
when Time cron "10 */5 * * * ?" then
    logInfo("FILE", "---- updating honeywell thermostat ----")
    val String results=executeCommandLine("/home/jfstepha/bin/openhab/refresh_txt.sh", 10000)
    logInfo("FILE", results)
    logInfo("FILE", "---- done honeywell done----")
    
end

/********************************/
/* Living room thermostat rules */
/*********************************/
/*

rule "Change LR temp Up"
when
   Item TempSet_FF_Living_Change received command UP
then
   logInfo("FILE", String::format("Changing LR temp") )
   //logInfo("FILE", String::format("Changing LR temp to %.3f", (TempSet_FF_Living.state as DecimalType) + 1.0) )
   //sendHttpGetRequest(String::format("http://lr-thermo/_setTarget/%.3f", (TempSet_FF_Living.state as DecimalType) + 0.5 ) )
   //val String results=executeCommandLine( String::format("/home/jfstepha/bin/openhab/honeywell_set_temp.sh %.1f", (TempSet_FF_Living.state as DecimalType) + 1.0 ), 1500)
   //postUpdate(TempSet_FF_Living, (TempSet_FF_Living.state as DecimalType) + 1.0) 
end

rule "Change LR temp Down"
when
   Item TempSet_FF_Living_Change received command DOWN
then
   logInfo("FILE", String::format("Changing LR temp to %.3f", (TempSet_FF_Living.state as DecimalType) - 0.5 ) )
   sendHttpGetRequest(String::format("http://lr-thermo/_setTarget/%.3f", (TempSet_FF_Living.state as DecimalType) - 0.5 ) )
   postUpdate(TempSet_FF_Living, (TempSet_FF_Living.state as DecimalType) - 0.5 )
end


rule "Set thermo temp" when
	Item TempSet_FF_Living changed 
then
	sendHttpGetRequest("http://lr-thermo/_setTarget/" + TempSet_FF_Living.state)
end
*/
/* old 
rule "Fan scaling"
when
        Item Fan_FF_Living changed to "true"
then
        postUpdate(Fan_FF_Living_Scaled, 65)
end

rule "Fan scaling2"
when
        Item Fan_FF_Living changed to "false"
then
        postUpdate(Fan_FF_Living_Scaled, 64)
end
*/

rule "Fan scaling"
when
        Item Fan_FF_Living received update
then
    if (Fan_FF_Living.state=="true") {
        postUpdate(Fan_FF_Living_Scaled, 65)
    }
    else {
        postUpdate(Fan_FF_Living_Scaled, 64)
    }
    
end

rule "Cool scaling"
when
        Item Cool_FF_Living changed to 1
then
        postUpdate(Cool_FF_Living_Scaled, 69)
end

rule "Cool scaling2"
when
        Item Cool_FF_Living changed to 0
then
    postUpdate(Cool_FF_Living_Scaled, 68)
end

rule "Heat FF scaling on"
when
        Item Heat_FF_Living changed to 1
then
        postUpdate(Heat_FF_Living_Scaled, 71)

end

rule "Heat FF scaling off"
when
        Item Heat_FF_Living changed to 0
then
	postUpdate(Heat_FF_Living_Scaled, 70)
end
