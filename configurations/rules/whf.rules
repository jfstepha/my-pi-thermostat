import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*

import java.util.List
import java.util.ArrayList


val org.eclipse.xtext.xbase.lib.Functions$Function1 calcMean = [ List<Integer> theArray |
	// logInfo("FILE", "  * Calc Mean");
	// logInfo("FILE", "    # array = " + theArray);
	var sum = 0.0 
	for( int v: theArray) { 
		sum = sum + v * 1.0;
	}
	var retval = sum / theArray.size() * 100.0;
	// logInfo("FILE", "    # returning: " + retval);
	retval
]

val org.eclipse.xtext.xbase.lib.Functions$Function1 calcMeanF = [ List<Float> theArray |
	// logInfo("FILE", "  * Calc MeanF");
	// logInfo("FILE", "    # array = " + theArray);
	var sum = 0.0 
	for( double v: theArray) { 
        // logInfo("FILE", "    # sum = " + sum + " adding " + v )
		sum = sum + v * 1.0;
	}
    // logInfo("FILE", "final calc:")
	var retval = sum / theArray.size() * 1.0;
	// logInfo("FILE", "    # returning: " + retval);
	retval
]

val org.eclipse.xtext.xbase.lib.Functions$Function2 dumbFunction = [ theItem, List<Integer> theArray |
	//logInfo("FILE", "  * dumb function item " + theItem);
	logInfo("FILE", "    * array = " + theArray);
]

val org.eclipse.xtext.xbase.lib.Functions$Function2 pushItem = [ theItem, List<Integer> theArray |
	// logInfo("FILE", "    * array = " + theArray);
	if( theItem == "true" || theItem == "1" ) { 
	    // logInfo("FILE", "    * pushing 1");
		theArray.add(1)
	} else { 
		// logInfo("FILE", "    * pushing 0");
		theArray.add(0)
	}
	if( theArray.size() > 240) { 
		// logInfo("FILE", "    * dropping the 1st item");
		theArray.remove(0)
	}
	// logInfo("FILE", "    * newary= " + theArray);
	theArray;
]

val org.eclipse.xtext.xbase.lib.Functions$Function2 pushItemL = [ theItem, List<Integer> theArray |
	// logInfo("FILE", "    * array = " + theArray);
	if( theItem == "true" || theItem=="1" ) { 
	    // logInfo("FILE", "    * pushing 1");
		theArray.add(1)
	} else { 
		// logInfo("FILE", "    * pushing 0");
		theArray.add(0)
	}
	if( theArray.size() > 10000) { 
		// logInfo("FILE", "    * dropping the 1st item");
		theArray.remove(0)
	}
	// logInfo("FILE", "    * newary= " + theArray);
	theArray;
]

/* for duty cycles */

val List<Integer> aryFan = newArrayList(0,0,1,1)           /* last 4 hours */
val List<Integer> aryFanDayAvg = newArrayList(0,0,1,1)     /* avg for the day */
val List<Integer> aryHeat = newArrayList(0,0,1,1)           /* last 4 hours */
val List<Integer> aryHeatDayAvg = newArrayList(0,0,1,1)     /* avg for the day */
val List<Float> aryTempOutdoor = newArrayList(50,50,50)    /* avg for the day */
val List<Float> arySetpoint = newArrayList(50,50,50)       /* avg for the day */

rule "Calc Daily"
when Time cron "0 5 0 * * ?" then
	logInfo("FILE", "********************************************** ")
    logInfo("FILE", "posting daily Fan average duty cycle: " + String::format("%.7f", ( calcMean.apply( aryFanDayAvg ) ) ) )
    postUpdate( Fan_Daily_Duty_Cycle, String::format("%.7f", ( calcMean.apply( aryFanDayAvg ) ) ) )
    logInfo("FILE", "posting daily Heat average duty cycle: " + String::format("%.7f", ( calcMean.apply( aryHeatDayAvg ) ) ) )
    postUpdate( Heat_Daily_Duty_Cycle, String::format("%.7f", ( calcMean.apply( aryHeatDayAvg ) ) ) )
    logInfo("FILE", "posting daily average weather: " + String::format("%.7f", (calcMeanF.apply( aryTempOutdoor ) ) ) )
    postUpdate( Weather_Temp_Daily, String::format("%.7f", (calcMeanF.apply( aryTempOutdoor ) )
    logInfo("FILE", "posting daily average setpoint: " + String::format("%.7f", (calcMeanF.apply( arySetpoint ) ) ) )
    postUpdate( TempSet_Daily, String::format("%.7f", (calcMeanF.apply( arySetpoint ) )
    logInfo("FILE", "posting setpoint minus outdoor")
    val Float diff = (TempSet_Day_Avg.state as DecimalType).floatValue - (Weather_Temp_Day_Avg.state as DecimalType).floatValue
    postUpdate( Temp_Outdoor_Minus_Set_Daily , String::format("%.7f", diff ) )
	logInfo("FILE", "done"
	logInfo("FILE", "********************************************** ")
end

rule "Reset Daily"
when Time cron "0 10 0 * * ?" then
	logInfo("FILE", "****** reseting daily duty cycles ************ ")
    aryFanDayAvg = newArrayList(0,0,1,1)
    aryHeatDayAvg = newArrayList(0,0,1,1)
    aryTempOutdoor = newArrayList(50,50,50)
    arySetpoint = newArrayList(50,50,50)
	logInfo("FILE", "done")
	logInfo("FILE", "********************************************** ")
end

rule "Duty Cycle Adjust"
when Time cron "5 * * * * ?" then

	logInfo("FILE", "********************************************** ")
	logInfo("FILE", "****** Executing simplified DC cron job ****** ")
	
	if( Fan_Duty_Cycle.state == NULL) { postUpdate( Fan_Duty_Cycle, 0 )}
	if( Fan_Daily_Duty_Cycle.state == NULL) { postUpdate( Fan_Daily_Duty_Cycle, 0 )}
	if( Fan_Day_Avg_Duty_Cycle.state == NULL) { postUpdate( Fan_Day_Avg_Duty_Cycle, 0 )}

	if( Heat_Duty_Cycle.state == NULL) { postUpdate( Heat_Duty_Cycle, 0 )}
	if( Heat_Daily_Duty_Cycle.state == NULL) { postUpdate( Heat_Daily_Duty_Cycle, 0 )}
	if( Heat_Day_Avg_Duty_Cycle.state == NULL) { postUpdate( Heat_Day_Avg_Duty_Cycle, 0 )}

    logInfo("FILE", " ** First Floor Fan ** State=" + Fan.state + " DC = " + Fan_Duty_Cycle.state.format("%.7f"))
	// logInfo("FILE", "    * fan.state = " + Fan.state + " aryFan = " + aryFan);
    dumbFunction.apply( Fan.state, aryFan );
	logInfo("FILE", "    * after dumb function");
    aryFan = pushItem.apply( Fan.state, aryFan )
    postUpdate( Fan_Duty_Cycle, String::format("%.7f", ( calcMean.apply( aryFan) ) ) )

    logInfo("FILE", " ** Heat ** State=" + Equip_Status.state + " DC = " + Heat_Duty_Cycle.state.format("%.7f"))
	// logInfo("FILE", "    * heat.state = " + Equip_Status.state + " aryHeat = " + aryHeat);
    dumbFunction.apply( Equip_Status.state, aryHeat );
	logInfo("FILE", "    * after dumb function");
    aryHeat = pushItem.apply( Equip_Status.state, aryHeat )
    postUpdate( Heat_Duty_Cycle, String::format("%.7f", ( calcMean.apply( aryHeat) ) ) )

    logInfo("FILE", " ** First Floor Fan Day Avg ** State=" + Fan.state + " DC = " + Fan_Day_Avg_Duty_Cycle.state.format("%.7f"))
    aryFanDayAvg = pushItemL.apply( Fan.state, aryFanDayAvg )
    postUpdate( Fan_Day_Avg_Duty_Cycle, String::format("%.7f", ( calcMean.apply( aryFanDayAvg) ) ) )

    logInfo("FILE", " ** First Floor Heat Day Avg ** State=" + Equip_Status.state + " DC = " + Heat_Day_Avg_Duty_Cycle.state.format("%.7f"))
    aryHeatDayAvg = pushItemL.apply( Equip_Status.state, aryHeatDayAvg )
    postUpdate( Heat_Day_Avg_Duty_Cycle, String::format("%.7f", ( calcMean.apply( aryHeatDayAvg) ) ) )

    logInfo("FILE", " ** Calculating daily average outdoor temp ** ")
	logInfo("FILE", "    * outdoor= " + Weather_Temperature.state)
    aryTempOutdoor.add( (Weather_Temperature.state as DecimalType).floatValue ) 
    logInfo("FILE", " posting update")
    postUpdate( Weather_Temp_Daily, String::format("%.7f", (calcMeanF.apply( aryTempOutdoor ) )
    logInfo("FILE", " calculating new agv")
    logInfo("FILE", " ** new average = " + calcMeanF.apply( aryTempOutdoor ) ) 

    logInfo("FILE", " ** Calculating daily average setpoint temp ** ")
	logInfo("FILE", "    * setpoint= " + TempSet.state)
    arySetpoint.add( (TempSet.state as DecimalType).floatValue ) 
    logInfo("FILE", " posting update")
    postUpdate( TempSet_Day_Avg, String::format("%.7f", (calcMeanF.apply( arySetpoint ) )
    logInfo("FILE", " calculating new agv")
    logInfo("FILE", " ** new average = " + calcMeanF.apply( arySetpoint ) ) 

	logInfo("FILE", "** Duty cycle Cron job done **")
end

rule "Update Honeywell Thermostat"
when Time cron "*/15 * * * * ?" then
    logInfo("FILE", "---- updating honeywell thermostat ----")
    val String results=executeCommandLine("/home/jfstepha/bin/openhab/refresh_txt.sh", 10000)
    logInfo("FILE", results)
    logInfo("FILE", "---- done honeywell done----")
    
end

/********************************/
/* Living room thermostat rules */
/*********************************/

rule "Fan scaling"
when
        Item Fan received update
then
    if (Fan.state=="true") {
        postUpdate(Fan_Scaled, 55)
    }
    else {
        postUpdate(Fan_Scaled, 50)
    }
    
end

rule "Equip scaling"
when
    Item Equip_Status received update
then
    if (Equip_Status.state=="0") {
        postUpdate(Equip_Status_Scaled, 30)
    }
    else if (Equip_Status.state=="1") {
        postUpdate(Equip_Status_Scaled, 35)
    }
    else if (Equip_Status.state=="2") {
        postUpdate(Equip_Status_Scaled, 40)
    }
    else if (Equip_Status.state=="3") {
        postUpdate(Equip_Status_Scaled, 45)
    }
end

